module Communicate_Send
(
    input CLOCK_50M,
	 input RST_n,
	 input Frame_Start_Sig;//一个时钟的高电平脉冲，代表一帧数据开始到来
	 input Data_Send_Sig,//一个脉冲信号，表示一个8位数据到来
    input [7:0]Data,//定义一个8x8的数据缓冲区，用来暂存圆光栅和光栅尺的脉冲计数 个数	 
	 input Tx_Done_Sig,//代表一个字节数据发送完成，
	 output [7:0]Tx_Data,//发送的字节
	 output Tx_En_Sig//发送时钟使能信号，可以在不发送数据时，让发送时钟停止
);
/**************************************************************/
`define FRAME_HEAD1 8'hff
`define FRAME_HEAD2 8'hfe
`define FRAME_TYPE  8'h00
`define FRAME_DATA_LEN 8'd8
//数据内容
//16位校验和
`define FRAME_TAIL1 8'hef
`define FRAME_TAIL2 8'hff
/**************************************************************/
    /*************************************
	接收数据，保存在缓冲中，当结束完毕，rec_complete高电平
	****************************************************/
	reg rec_start;
	reg rec_complete;
	reg [2:0]data_count;
	reg [7:0]rData[7:0];
	reg [15:0]check_sum;
	always @(posedge CLOCK_50M or negedge RST_n)
		if(!RST_n)
		begin			
			data_count<=3'd0;
			rec_start<=1'b0;
			rec_complete<=1'b0;
			check_sum<=16'd0;
		end
		else if(Frame_Start_Sig)
		begin
			rec_start<=1'b1;
			data_count<=3'd0;
			rec_complete<=1'b0;
			check_sum<=16'd0;
		end
		else if(rec_start)
		begin
			if(Data_Send_Sig)
			begin
				check_sum<=check_sum+Data;//校验和
				rData[data_count]<=Data;//数据缓冲
				if(data_count==3'd7)
				begin
					data_count<=3'd0;
					rec_complete<=1'b1;
				end
				else 
				    data_count<=data_count+3'd1;
			end			
		end
/******************************************************************/
reg [4:0]i;
reg [3:0]tx_count;
reg tx_enable;
reg [7:0]rTx_Data;
	always @(posedge CLOCK_50M or negedge RST_n)
		if(!RST_n)
		begin
			tx_count<=4'd0;
			tx_enable<=1'b0;
			rTx_Data<=8'h00;
			i=5'd0;
		end
		else if(rec_complete)
		begin
			if(Tx_Done_Sig )
			begin
				tx_enable<=1'b0;
				case (i)
					5'd0: begin rTx_Data<=`FRAME_HEAD1; i<=i+5'd1;end
					5'd1: begin rTx_Data<=`FRAME_HEAD2; i<=i+5'd1;end
					5'd2: begin rTx_Data<=`FRAME_TYPE; i<=i+5'd1;end
					5'd3: begin rTx_Data<=`FRAME_DATA_LEN; i<=i+5'd1;end
					5'd4,5'd5,5'd6,5'd7,5'd8,5'd9,5'd10,5'd11:
						  begin
							rTx_Data<=rData[tx_count];
							if(tx_count==4'd7)
								tx_count<=4'd0;
							else
								tx_count<=tx_count+4'd1;
						  end
					5'd12: begin rTx_Data<=check_sum[7:0]; i<=i+5'd1;end
					5'd13: begin rTx_Data<=check_sum[15:8]; i<=i+5'd1;end
					5'd14: begin rTx_Data<=`FRAME_TAIL1; i<=i+5'd1;end
					5'd15: begin rTx_Data<=`FRAME_TAIL2; i<=5'D0;end
					default:begin i<=5'd0; end
				endcase			
			end
			else
				tx_enable<=1'b1;//开始发送数据
		end
		else 
		begin
			tx_count<=4'd0;
			tx_enable<=1'b0;
			rTx_Data<=8'h00;
			i=5'd0;
		end
    /*************************************/
	 
	 assign Tx_En_Sig = tx_enable;
	 assign TX_Data = rTx_Data;
	 
	 /*************************************/
	 

endmodule
